const {
  Connection,
  sendAndConfirmTransaction,
  Keypair,
  Transaction,
  SystemProgram,
  PublicKey,
  TransactionInstruction,
} = require("@solana/web3.js");

const BN = require("bn.js");

const main = async () => {
  var args = process.argv.slice(2);
  // args[0]: Program ID
  // args[1] (Optional): Counter buffer account
  // Initially, we will pass no 2nd argument so as to create the account
  // Later, we will pass the counter buffer account address as 2nd argument for each command.

  // Get public key of the program from the argument list, this was generated by solana-cli
  const programId = new PublicKey(args[0]);
  console.log(programId.toBase58());

  const connection = new Connection("http://api.devnet.solana.com");

  // Create a new keypair to sign the transaction
  const feePayer = new Keypair();

  // Request airdrop to the signer
  console.log("Requesting Airdrop of 2 SOL...");
  await connection.requestAirdrop(feePayer.publicKey, 2e9);
  console.log("Airdrop received");

  // Generate a new keypair to use as the counter buffer account address
  const counter = new Keypair();
  let counterKey = counter.publicKey;

  let tx = new Transaction();
  let signers = [feePayer];
  // Create a new transaction object and add the signer to the list of signers
  if (args.length > 1) {
    console.log("Found counter address");
    counterKey = new PublicKey(args[1]);
  }
  // If the counter buffer account address is passed as 2nd argument, use it and not the generated one
  else {
    console.log("Generating new counter address");
    let createIx = SystemProgram.createAccount({
      // The account that will transfer lamports to the created account
      fromPubkey: feePayer.publicKey,
      // The address of the created account
      newAccountPubkey: counterKey,
      // Amount of lamports to transfer to the created counter account by finding minimal amount to make it rent-exempt
      lamports: await connection.getMinimumBalanceForRentExemption(8),
      // Amount of space in bytes to allocate to the created account
      space: 8,
      // Public key of the program to assign as the owner of the created account
      programId: programId,
    });
    signers.push(counter);
    tx.add(createIx);
  }

  const idx = Buffer.from(new Uint8Array([0]));
  // here idx is instruction_data for the program to execute
  // 0: increment operation (1st arg of enum)
  // 1: decrement operation (2nd arg of enum)

  // Create an instruction
  const incrIx = new TransactionInstruction({
    keys: [
      // Vec<AccountMeta>
      {
        pubkey: counterKey, // Account's public key
        isSigner: false, // True if the instruction requires a transaction signature matching pubkey
        isWritable: true, // True if the account buffer can be written to by using the pubkey
      },
    ],
    programId: programId, // program to execute
    data: idx, // instruction data buffer of random bytes
  });
  /*
    TransactionInstruction({
      keys: Array<AccountMeta>,
      programId: PublicKey,
      data: Buffer,
    });
  */

  // Add the instruction to the transaction list
  tx.add(incrIx);

  // Sign and send the transaction
  let txid = await sendAndConfirmTransaction(connection, tx, signers, {
    skipPreflight: true,
    preflightCommitment: "confirmed",
    commitment: "confirmed",
  });
  console.log(`https://explorer.solana.com/tx/${txid}?cluster=devnet`);

  data = (await connection.getAccountInfo(counterKey, "confirmed")).data;
  count = new BN(data, "le");
  console.log("Counter Key:", counterKey.toBase58());
  console.log("Count: ", count.toNumber());
};

main()
  .then(() => {
    console.log("Success");
  })
  .catch((e) => {
    console.error(e);
  });
